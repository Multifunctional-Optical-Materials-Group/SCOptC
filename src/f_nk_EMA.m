
function [N] = f_nk_EMA(n1, n2, n3, f1, f2, tipo)

    e1 = complex(n1).^2; % inclusiones 1
    e2 = complex(n2).^2; % inclusiones 2
    e3 = complex(n3).^2; % matriz
    
    %f3 = 1-f1-f2;
    
    switch tipo
        case 1 % volumetrico
            e0 = e1*f1 + e2*f2 + e3*(1-f1-f2);
        case 2 % bruggeman
            e0 = e3./3 - e2./6 - e1./6 + ((((e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2).^3./27 + ...
                 (((e1.*e3)./2 - (e1.*e2)./4 + (e2.*e3)./2 + (3.*e1.*e2.*f1)./4 + (3.*e1.*e2.*f2)./4 - (3.*e1.*e3.*f2)./4 - ...
                 (3.*e2.*e3.*f1)./4).*(e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2))./6 - ...
                 (e1.*e2.*e3)./8).^2 - ((e1.*e3)./6 - (e1.*e2)./12 + (e2.*e3)./6 + (e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + ... 
                 (3.*e3.*f1)./2 + (3.*e3.*f2)./2).^2./9 + (e1.*e2.*f1)./4 + (e1.*e2.*f2)./4 - (e1.*e3.*f2)./4 - (e2.*e3.*f1)./4).^3).^(1./2) - ...
                 (((e1.*e3)./2 - (e1.*e2)./4 + (e2.*e3)./2 + (3.*e1.*e2.*f1)./4 + (3.*e1.*e2.*f2)./4 - (3.*e1.*e3.*f2)./4 - ... 
                 (3.*e2.*e3.*f1)./4).*(e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2))./6 - ...
                 (e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2).^3./27 + (e1.*e2.*e3)./8).^(1./3) + ...
                 (e1.*f1)./2 + (e2.*f2)./2 - (e3.*f1)./2 - (e3.*f2)./2 + ((e1.*e3)./6 - (e1.*e2)./12 + (e2.*e3)./6 + (e1./2 + e2./2 - e3 - ...
                 (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2).^2./9 + (e1.*e2.*f1)./4 + (e1.*e2.*f2)./4 - (e1.*e3.*f2)./4 - ... 
                 (e2.*e3.*f1)./4)./((((e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2).^3./27 + (((e1.*e3)./2 - ...
                 (e1.*e2)./4 + (e2.*e3)./2 + (3.*e1.*e2.*f1)./4 + (3.*e1.*e2.*f2)./4 - (3.*e1.*e3.*f2)./4 - (3.*e2.*e3.*f1)./4).*(e1./2 + e2./2 - e3 - ...
                 (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2))./6 - (e1.*e2.*e3)./8).^2 - ((e1.*e3)./6 - (e1.*e2)./12 + (e2.*e3)./6 + ...
                 (e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2).^2./9 + (e1.*e2.*f1)./4 + (e1.*e2.*f2)./4 - ...
                 (e1.*e3.*f2)./4 - (e2.*e3.*f1)./4).^3).^(1./2) - (((e1.*e3)./2 - (e1.*e2)./4 + (e2.*e3)./2 + (3.*e1.*e2.*f1)./4 + (3.*e1.*e2.*f2)./4 - ...
                 (3.*e1.*e3.*f2)./4 - (3.*e2.*e3.*f1)./4).*(e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2))./6 - ...
                 (e1./2 + e2./2 - e3 - (3.*e1.*f1)./2 - (3.*e2.*f2)./2 + (3.*e3.*f1)./2 + (3.*e3.*f2)./2).^3./27 + (e1.*e2.*e3)./8).^(1./3);
        case 3 % maxwell-garnett
            aux = (f1.*(e1 - e3))./(e1 + 2.*e3) + (f2.*(e2 - e3))./(e2 + 2.*e3);
            e0  = e3.*(1+2.*aux)./(1-aux);             
    end
    
    n  = real(sqrt(e0));
    k  = imag(sqrt(e0));
    
    N  = n+1i*k;

end

